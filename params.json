{"body":"python-inspector\r\n================\r\n\r\n<a href='https://travis-ci.org/sebdah/python-inspector'><img src='https://secure.travis-ci.org/sebdah/python-inspector.png?branch=master'></a>\r\n\r\nThis module helps you to track down which Python method that called your method.\r\nIt can be helpful when debugging code in some situations. All you need to do\r\nis to import the module to your project and call `inspector.trace()` (and \r\ncatch the output rows).\r\n\r\n## Installation\r\n\r\nThe `python-inspector` is available trough `pip`, simple run\r\n\r\n    pip install python-inspector\r\n\r\n## Requirements\r\n\r\nPython version >2.5 and <3.0\r\n\r\n## Example usage\r\n\r\nHere's a simple example usage of the `inspector`\r\n\r\n\t#!/usr/bin/env python\r\n\r\n\t\"\"\"\r\n\tTesting the Python call inspector\r\n\t\"\"\"\r\n\timport sys\r\n\timport inspector\r\n\r\n\tdef func2():\r\n\t    \"\"\"\r\n\t    Example method\r\n\t    \"\"\"\r\n\t    # This is the method you want to debug\r\n\r\n\t    # Your code here\r\n\r\n\t    print 'TRACE OUTPUT:'\r\n\t    for log_row in inspector.trace():\r\n\t        print log_row\r\n\r\n\t    # More code\r\n\t    \r\n\t    return True\r\n\r\n\tdef func1():\r\n\t    \"\"\"\r\n\t    Example method\r\n\t    \"\"\"\r\n\t    return func2()\r\n\r\n\tdef call_me():\r\n\t    \"\"\"\r\n\t    Call this function to test\r\n\t    \"\"\"\r\n\t    return func1()\r\n\r\n\tcall_me()\r\n\r\n\tsys.exit(0)\r\n\r\nIn this example we debug `func2()` using the `inspector`. The output generated\r\nwill look like this:\r\n\r\n\tTRACE OUTPUT:\r\n\tt.py:29 in method func1\r\n\t\treturn func2()\r\n\tt.py:35 in method call_me\r\n\t\treturn func1()\r\n\tt.py:37 in method <module>\r\n\t\tcall_me()\r\n\r\n## Documentation for `inspector`\r\n\r\nThe `inspector` module is really simple and does only contain one function, \r\n`trace`.\r\n\r\n### Function `trace`\r\n\r\nThe docstring explains this pretty well.\r\n\r\n\tTrace the current method call and return an array of log lines\r\n\r\n    Kwargs:\r\n        depth (int)::\r\n            How many deep do you want to dig, i.e. how many callers to show.\r\n            Set to 0 to get all calls. (default 0)\r\n        one_line_response (bool)::\r\n            Write the response log lines on one row (default False)\r\n        basename_only::\r\n            Return the filename without path (default False)\r\n\r\n    Returns:\r\n        List of strings (loglines), [str, str..]\r\n\r\n#### Return data\r\n\r\nThe method returns a list of log lines (strings). I.e. `[str, str ...]`\r\n\r\n## Release notes\r\n\r\n### 0.2.0 (2013-01-07)\r\n\r\n- Made the script available under Apache license 2.0\r\n- Added `python-inspector` to `pip`\r\n\r\n### 0.1.0 (2012-12-05)\r\n\r\n- Initial release\r\n","tagline":"Used to track down which Python module and script that called your method / function. It will show you the exact Python file, line number and the actual line that made the call. The module is plug'n'playable, just import it and place a non-interfering hook in your code.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Python-inspector","google":"UA-37516009-1"}